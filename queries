STEP 0 — Database & user

-- Create DB and switch
CREATE DATABASE IF NOT EXISTS NeoUrban;
USE NeoUrban;

-- Create app user (adjust host/password as needed)
CREATE USER IF NOT EXISTS 'neoadmin'@'localhost' IDENTIFIED BY '123';
GRANT ALL PRIVILEGES ON NeoUrban.* TO 'neoadmin'@'localhost';
FLUSH PRIVILEGES;

🧹 STEP 1 — Clean drop in FK order 
-- Children first
DROP VIEW IF EXISTS v_unpaid_bills;
DROP VIEW IF EXISTS v_request_status_counts;

DROP TABLE IF EXISTS Tickets;
DROP TABLE IF EXISTS Appointments;
DROP TABLE IF EXISTS Bills;
DROP TABLE IF EXISTS Requests;

DROP TABLE IF EXISTS Transportation;
DROP TABLE IF EXISTS Healthcare;
DROP TABLE IF EXISTS Utilities;
DROP TABLE IF EXISTS Services;

-- Parents
DROP TABLE IF EXISTS Citizens;

🏗️ STEP 2 — Core schema (DDL) with constraints (PK/FK/UNIQUE/CHECK)

-- Citizens (parent)
CREATE TABLE Citizens (
  citizen_id INT AUTO_INCREMENT PRIMARY KEY,
  name        VARCHAR(100)                NOT NULL,
  age         INT                         NOT NULL CHECK (age > 0),
  gender      ENUM('Male','Female','Other') NOT NULL,
  address     VARCHAR(255),
  contact     VARCHAR(20) UNIQUE
) ENGINE=InnoDB;

-- City Services (parent)
CREATE TABLE Services (
  service_id   INT AUTO_INCREMENT PRIMARY KEY,
  service_name VARCHAR(120) NOT NULL,
  category     ENUM('Waste','Electricity','Water','Transport','Healthcare','Internet') NOT NULL,
  provider     VARCHAR(120) NOT NULL
) ENGINE=InnoDB;

-- Utilities (parent)
CREATE TABLE Utilities (
  utility_id INT AUTO_INCREMENT PRIMARY KEY,
  type       ENUM('Electricity','Water','Internet','Gas') NOT NULL,
  provider   VARCHAR(120) NOT NULL
) ENGINE=InnoDB;

-- Transportation (parent)
CREATE TABLE Transportation (
  transport_id INT AUTO_INCREMENT PRIMARY KEY,
  type   ENUM('Bus','Metro','Train') NOT NULL,
  route  VARCHAR(100) NOT NULL,
  capacity INT NOT NULL CHECK (capacity > 0)
) ENGINE=InnoDB;

-- Healthcare facilities (parent)
CREATE TABLE Healthcare (
  hospital_id INT AUTO_INCREMENT PRIMARY KEY,
  name        VARCHAR(120) NOT NULL,
  location    VARCHAR(150),
  capacity    INT NOT NULL CHECK (capacity >= 0)
) ENGINE=InnoDB;

-- Requests (child: citizen → service)
CREATE TABLE Requests (
  request_id   INT AUTO_INCREMENT PRIMARY KEY,
  citizen_id   INT NOT NULL,
  service_id   INT NOT NULL,
  status       ENUM('Pending','In Progress','Completed') NOT NULL DEFAULT 'Pending',
  priority     ENUM('Low','Medium','High') DEFAULT 'Low',
  request_date DATE NOT NULL DEFAULT (CURRENT_DATE),
  FOREIGN KEY (citizen_id) REFERENCES Citizens(citizen_id) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (service_id) REFERENCES Services(service_id) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

-- Tickets (child: citizen & transport)
CREATE TABLE Tickets (
  ticket_id    INT AUTO_INCREMENT PRIMARY KEY,
  citizen_id   INT NOT NULL,
  transport_id INT NOT NULL,
  fare         DECIMAL(10,2) NOT NULL CHECK (fare >= 0),
  booking_date DATE NOT NULL DEFAULT (CURRENT_DATE),
  FOREIGN KEY (citizen_id)   REFERENCES Citizens(citizen_id)     ON DELETE CASCADE,
  FOREIGN KEY (transport_id) REFERENCES Transportation(transport_id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Appointments (child: citizen & hospital)
CREATE TABLE Appointments (
  appointment_id  INT AUTO_INCREMENT PRIMARY KEY,
  citizen_id      INT NOT NULL,
  hospital_id     INT NOT NULL,
  doctor_name     VARCHAR(120) NOT NULL,
  appointment_date DATE NOT NULL,
  status          ENUM('Scheduled','Completed','Cancelled') NOT NULL DEFAULT 'Scheduled',
  FOREIGN KEY (citizen_id)  REFERENCES Citizens(citizen_id)  ON DELETE CASCADE,
  FOREIGN KEY (hospital_id) REFERENCES Healthcare(hospital_id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Bills (child: citizen & utility)
CREATE TABLE Bills (
  bill_id       INT AUTO_INCREMENT PRIMARY KEY,
  citizen_id    INT NOT NULL,
  utility_id    INT NOT NULL,
  amount        DECIMAL(12,2) NOT NULL CHECK (amount >= 0),
  due_date      DATE NOT NULL,
  payment_status ENUM('Unpaid','Paid') NOT NULL DEFAULT 'Unpaid',
  created_at    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (citizen_id) REFERENCES Citizens(citizen_id) ON DELETE CASCADE,
  FOREIGN KEY (utility_id) REFERENCES Utilities(utility_id) ON DELETE CASCADE
) ENGINE=InnoDB;

🧪 STEP 3 — Seed data (DML) & quick updates/deletes (Lab 02 DML flow

Lab 02

)
-- Citizens
INSERT INTO Citizens (name, age, gender, address, contact) VALUES
('Alice Khan', 28, 'Female', 'Dhaka',  '01710000001'),
('Rahim Uddin', 35, 'Male',   'Khulna', '01710000002'),
('Sadia Noor',  22, 'Female', 'Rajshahi','01710000003'),
('Tanvir A.',   41, 'Male',   'Chattogram','01710000004');

-- Services
INSERT INTO Services (service_name, category, provider) VALUES
('Waste Collection', 'Waste', 'City Corp'),
('Electricity Supply','Electricity','DESCO'),
('Water Supply',     'Water','WASA'),
('Metro Service',    'Transport','Dhaka Metro'),
('Public Clinic',    'Healthcare','City Health');

-- Utilities
INSERT INTO Utilities (type, provider) VALUES
('Electricity','DESCO'),('Water','WASA'),('Internet','BDCom'),('Gas','Titas');

-- Transportation
INSERT INTO Transportation (type, route, capacity) VALUES
('Bus','B-12 Uttara–Motijheel',60),
('Metro','MRT-6', 800),
('Train','Intercity 702', 1200);

-- Healthcare
INSERT INTO Healthcare (name, location, capacity) VALUES
('Dhaka City Hospital','Shahbag', 300),
('Metro Clinic','Uttara', 80);

-- Requests
INSERT INTO Requests (citizen_id, service_id, status, priority, request_date) VALUES
(1,1,'Pending','High',  CURRENT_DATE),
(2,2,'In Progress','Medium', CURRENT_DATE - INTERVAL 1 DAY),
(1,3,'Completed','Low', CURRENT_DATE - INTERVAL 5 DAY);

-- Tickets
INSERT INTO Tickets (citizen_id, transport_id, fare, booking_date) VALUES
(1,2, 100.00, CURRENT_DATE), (2,1, 35.00, CURRENT_DATE - INTERVAL 2 DAY);

-- Appointments
INSERT INTO Appointments (citizen_id, hospital_id, doctor_name, appointment_date, status) VALUES
(1,1,'Dr. Reza','2025-10-05','Scheduled'),
(3,2,'Dr. Lima','2025-10-02','Completed');

-- Bills
INSERT INTO Bills (citizen_id, utility_id, amount, due_date, payment_status) VALUES
(1,1, 1200.00, '2025-10-10','Unpaid'),
(1,2,  650.00, '2025-10-05','Paid'),
(2,3,  999.99, '2025-10-12','Unpaid'),
(3,4,  550.00, '2025-10-07','Unpaid');

-- Example update/delete
UPDATE Bills SET payment_status='Paid' WHERE bill_id=3;
DELETE FROM Tickets WHERE fare < 40;

-- Projection + alias
SELECT citizen_id AS id, name AS full_name FROM Citizens;

-- WHERE + IN / NOT IN
SELECT * FROM Services WHERE category IN ('Water','Electricity');

-- LIKE (pattern matching)
SELECT * FROM Transportation WHERE route LIKE 'MRT%';   -- Metro routes

-- REGEXP / REGEXP_SUBSTR (MySQL 8+)
SELECT route,
       REGEXP_SUBSTR(route, '[0-9]+') AS extracted_number
FROM Transportation;

-- BETWEEN / NOT BETWEEN
SELECT * FROM Bills WHERE amount BETWEEN 600 AND 1500;

-- ORDER BY (ASC default / DESC)
SELECT * FROM Requests ORDER BY status, priority DESC, request_date DESC;


(SELECT syntax, pattern matching, ORDER BY, and predicates reflect Lab 04 explanations

Lab 04

.)

∑ STEP 5 — Aggregates, GROUP BY, HAVING (with IFNULL)

Lab 04

-- Counts
SELECT COUNT(*) AS total_citizens FROM Citizens;

-- Aggregation per utility type
SELECT u.type, AVG(b.amount) AS avg_bill, SUM(b.amount) AS total_bill
FROM Bills b JOIN Utilities u ON b.utility_id = u.utility_id
GROUP BY u.type
HAVING SUM(b.amount) > 500;

-- Count requests by status
SELECT status, COUNT(*) AS cnt
FROM Requests
GROUP BY status;

-- Average amount treating NULL as 0 (NVL in lab ⇒ IFNULL here)
SELECT AVG(IFNULL(amount,0)) AS avg_amt_including_nulls FROM Bills;


(Aggregate function caveats & HAVING use mirror Lab 04 notes

Lab 04

.)

🔗 STEP 6 — Joins (inner/outer/natural/cross, multi-column, self, non-equi)

Lab 06

-- INNER JOIN: citizen requests with service
SELECT c.name, s.service_name, r.status, r.request_date
FROM Requests r
JOIN Citizens c ON r.citizen_id = c.citizen_id
JOIN Services s ON r.service_id = s.service_id;

-- LEFT OUTER JOIN: keep all citizens, show bills if any
SELECT c.name, b.amount, b.payment_status
FROM Citizens c
LEFT JOIN Bills b ON c.citizen_id = b.citizen_id
ORDER BY c.name;

-- RIGHT OUTER JOIN: all utilities, show bills if any
SELECT u.type, u.provider, b.amount
FROM Bills b
RIGHT JOIN Utilities u ON b.utility_id = u.utility_id;

-- FULL OUTER JOIN (emulate in MySQL): union of left+right
SELECT c.name, b.amount, b.payment_status
FROM Citizens c LEFT JOIN Bills b ON c.citizen_id = b.citizen_id
UNION
SELECT c.name, b.amount, b.payment_status
FROM Citizens c RIGHT JOIN Bills b ON c.citizen_id = b.citizen_id;

-- NATURAL JOIN (only safe when same-named keys)
-- Example: if both tables had 'citizen_id' column names identical
-- SELECT * FROM SomeA NATURAL JOIN SomeB;

-- CROSS JOIN: all combinations (careful!)
SELECT c.name, tr.route
FROM Citizens c
CROSS JOIN Transportation tr
LIMIT 10;

-- Multi-column join idea (like advisor+dept in lab): here, example if we had composite keys
-- SELECT ... FROM A JOIN B ON A.k1=B.k1 AND A.k2=B.k2;

-- SELF JOIN: citizens in same address (neighbours)
SELECT c1.name AS person, c2.name AS neighbour, c1.address
FROM Citizens c1
JOIN Citizens c2 ON c1.address = c2.address AND c1.citizen_id < c2.citizen_id;

-- NON-EQUI join: bills greater than utility-type average
WITH avg_util AS (
  SELECT utility_id, AVG(amount) AS avg_amt
  FROM Bills GROUP BY utility_id
)
SELECT b.bill_id, u.type, b.amount, a.avg_amt
FROM Bills b
JOIN avg_util a ON b.utility_id = a.utility_id AND b.amount > a.avg_amt
JOIN Utilities u ON u.utility_id = b.utility_id;


(Join patterns correspond to Lab 06 inner/outer/cross/natural/self and multi-predicate joins

Lab 06

.)

🧩 STEP 7 — Subqueries (scalar, IN, correlated, FROM), insert-select (Lab 04 part-2)

Lab 05

-- Scalar subquery in SELECT: global avg bill
SELECT b.bill_id, b.amount,
       (SELECT AVG(amount) FROM Bills) AS global_avg_bill
FROM Bills b;

-- IN subquery: citizens who used Metro
SELECT name
FROM Citizens
WHERE citizen_id IN (
  SELECT t.citizen_id
  FROM Tickets t JOIN Transportation tr ON t.transport_id = tr.transport_id
  WHERE tr.type='Metro'
);

-- Correlated subquery: bills above citizen's own average
SELECT b.*
FROM Bills b
WHERE b.amount >
  (SELECT AVG(b2.amount) FROM Bills b2
   WHERE b2.citizen_id = b.citizen_id);

-- FROM-subquery: average request age per status
SELECT status, AVG(days_open) AS avg_days_open
FROM (
  SELECT status, DATEDIFF(CURRENT_DATE, request_date) AS days_open
  FROM Requests
) x
GROUP BY status;

-- INSERT via subquery: escalate all pending 'High' to a "service action log" table (demo)
CREATE TABLE IF NOT EXISTS RequestActions (
  action_id INT AUTO_INCREMENT PRIMARY KEY,
  request_id INT, action VARCHAR(50), action_date DATETIME DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO RequestActions (request_id, action)
SELECT request_id, 'Escalated'
FROM Requests WHERE status='Pending' AND priority='High';


(Subqueries in SELECT/WHERE/FROM and insert-select match Lab 04 examples

Lab 05

.)

🔀 STEP 8 — Set operations (UNION/ALL, INTERSECT/EXCEPT alternatives)

Lab 05

-- UNION removes dups; UNION ALL keeps dups
SELECT provider FROM Utilities
UNION
SELECT provider FROM Services;

-- INTERSECT (MySQL 8.0.31+). If older, use INNER JOIN on distinct providers
-- SELECT provider FROM Utilities INTERSECT SELECT provider FROM Services;
SELECT u.provider
FROM (SELECT DISTINCT provider FROM Utilities) u
JOIN (SELECT DISTINCT provider FROM Services) s USING (provider);

-- EXCEPT / MINUS alternative: providers in Utilities but not in Services
-- (MySQL 8.0.31+: SELECT provider FROM Utilities EXCEPT SELECT provider FROM Services;)
SELECT u.provider
FROM (SELECT DISTINCT provider FROM Utilities) u
LEFT JOIN (SELECT DISTINCT provider FROM Services) s USING (provider)
WHERE s.provider IS NULL;


(Set op precedence & compatibility adapted from Lab 04 notes

Lab 05

.)

👓 STEP 9 — Views (readable analytics; updatable view demo)

Lab 05

-- Unpaid bills view
CREATE OR REPLACE VIEW v_unpaid_bills AS
SELECT c.citizen_id, c.name, u.type AS utility_type, b.amount, b.due_date
FROM Bills b
JOIN Citizens c ON b.citizen_id=c.citizen_id
JOIN Utilities u ON b.utility_id=u.utility_id
WHERE b.payment_status='Unpaid';

-- Request status counts
CREATE OR REPLACE VIEW v_request_status_counts AS
SELECT status, COUNT(*) AS total
FROM Requests
GROUP BY status;

-- Updatable view (single-table projection)
CREATE OR REPLACE VIEW v_citizens_basic AS
SELECT citizen_id, name, contact FROM Citizens;

-- Update through view (allowed because it’s a direct column mapping)
UPDATE v_citizens_basic SET contact='01719999999' WHERE citizen_id=1;


(View purposes and updatability echo Lab 04 guidance

Lab 05

.)

🔒 STEP 10 — Transactions (atomic bill payment + log)

Lab 02

START TRANSACTION;
  UPDATE Bills SET payment_status='Paid' WHERE bill_id=1;
  INSERT INTO RequestActions (request_id, action) VALUES (NULL, 'Bill #1 paid'); -- demo log
COMMIT;

-- If something goes wrong:
-- ROLLBACK;

⚡ STEP 11 — Triggers (business rules)
-- Mark overdue bills as Unpaid before insert/update if due_date passed
DELIMITER //
CREATE TRIGGER trg_bills_overdue_bi BEFORE INSERT ON Bills
FOR EACH ROW
BEGIN
  IF NEW.due_date < CURDATE() THEN
    SET NEW.payment_status = 'Unpaid';
  END IF;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER trg_bills_overdue_bu BEFORE UPDATE ON Bills
FOR EACH ROW
BEGIN
  IF NEW.due_date < CURDATE() AND NEW.payment_status <> 'Paid' THEN
    SET NEW.payment_status = 'Unpaid';
  END IF;
END//
DELIMITER ;


(While triggers weren’t explicitly in labs, they complement integrity & DML flow.)

📊 STEP 12 — Window functions (analytics dashboards)
-- Rank citizens by total spend
SELECT c.citizen_id, c.name, SUM(b.amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(b.amount) DESC) AS spend_rank
FROM Citizens c
LEFT JOIN Bills b ON c.citizen_id=b.citizen_id
GROUP BY c.citizen_id, c.name;

-- Monthly bills per citizen with running total
SELECT c.name,
       DATE_FORMAT(b.due_date, '%Y-%m') AS ym,
       SUM(b.amount) AS month_total,
       SUM(SUM(b.amount)) OVER (PARTITION BY c.citizen_id ORDER BY DATE_FORMAT(b.due_date,'%Y-%m')) AS running_total
FROM Bills b
JOIN Citizens c ON b.citizen_id=c.citizen_id
GROUP BY c.name, c.citizen_id, ym;

🚀 STEP 13 — Admin DDL tweaks (ALTER/RENAME/DROP column)

Lab 02

-- Add column
ALTER TABLE Citizens ADD COLUMN national_id VARCHAR(20);

-- Modify column type/size
ALTER TABLE Services MODIFY COLUMN service_name VARCHAR(150);

-- Rename column
ALTER TABLE Transportation RENAME COLUMN route TO route_name;

-- Drop column
ALTER TABLE Citizens DROP COLUMN national_id;


(DDL alteration syntax aligns with Lab 02 demonstrations